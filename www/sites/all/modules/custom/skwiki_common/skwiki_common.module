<?php

/**
 * @file
 * General custom functionality for the Semantic Kurfess Wiki.
 */

/**
 * Implementation of hook_block_info().
 */
function skwiki_common_block_info() {
  $blocks['course_menu'] = array(
    'info' => t('Course Menu'), 
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implementation of hook_block_view().
 */
function skwiki_common_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'course_menu':
      $block['subject'] = '';
      $block['content'] = _skwiki_common_course_menu_block();
      break;
  }
  
  return $block;
}

/**
 * Internal block function to return rendered HTML of a menu when visiting pages that are course-specific
 */
function _skwiki_common_course_menu_block() {
  $output = '';

  $group = og_context();
  if (isset($group->gid)) {
    $class_node = node_load($group->etid);
    if ($class_node->type == 'class') {
      $output .= '<h4>' . $class_node->title . '</h4>';
      
      // Begin array of links
      $items = array();
      
      // Add class news link
      $items[] = l(t('Class News'), 'news/' . $group->gid);
      
      // Add syllabus link
      $syllabus_node = skwiki_common_get_class_info('syllabus', $group->gid);
      if ($syllabus_node) {
        $items[] = l(t('Syllabus'), 'node/' . $syllabus_node->nid);
      }
      
      // Add schedule link
      $schedule_node = skwiki_common_get_class_info('schedule', $group->gid);    
      if ($schedule_node) {
        $items[] = l(t('Schedule'), 'node/' . $schedule_node->nid);
      }
      
      // Add labs/assignments link
      $items[] = l(t('Labs & Assignments'), 'assignments/' . $group->gid);
     
      // Add AI nuggets link
      $items[] = l(t('AI Nuggets'), 'nuggets/' . $group->gid);
      
      // Add teams link
      $items[] = l(t('Project'), 'teams', array('query' => array('gids_node[]' => $class_node->nid)));
      
      $output .= theme('item_list', array('items' => $items));
    }
  }
  
  return $output;
}

/**
 * Return a common info page of the given type for the supplied group id
 */
function skwiki_common_get_class_info($node_type, $class_gid) {
  $class_info = &drupal_static(__FUNCTION__);
  
  if (!isset($class_info[$class_gid])) {
    $class_info[$class_gid] = array();
  }
  
  if (!isset($class_info[$class_gid][$node_type])) {
    $class_info[$class_gid][$node_type] = NULL;
    $query = db_select('og_membership', 'o');
    $query->join('node', 'n', 'n.nid = o.etid');
    $query->fields('o', array('etid'))
          ->condition('o.entity_type', 'node')
          ->condition('n.type', $node_type)
          ->condition('o.gid', $class_gid);
    $nid = $query->execute()->fetchField();
    
    if ($nid) {
      $class_info[$class_gid][$node_type] = node_load($nid);
    }
  }
  
  return $class_info[$class_gid][$node_type];
}

/**
 * Implementation of hook_preprocess_views_view_field().
 */
function skwiki_common_preprocess_views_view_field(&$vars) {
  if ($vars['view']->name == 'og_list' &&
    (($vars['view']->current_display == 'page_2') || ($vars['view']->current_display == 'attachment_1'))) {
    // "Current Courses" or "Past Courses" view. @see /teaching
    if ($vars['field']->options['id'] == 'nothing' || $vars['field']->options['id'] == 'nothing_1') {
      // Either the "syllabus" or "schedule" field.
      $node_type = ($vars['field']->options['id'] == 'nothing') ? 'syllabus' : 'schedule';
      
      // Grab the syllabus or schedule NID for this particular class, if it exists
      $group = og_get_group('node', $vars['row']->nid);
      if (isset($group->gid)) {
        $node = skwiki_common_get_class_info($node_type, $group->gid);
        if ($node) {
          $vars['output'] = l($vars['output'], 'node/' . $node->nid);
        }
        else {
          $vars['output'] = 'N/A';
        }
      }
    }
  }
}

/**
 * Implementation of hook_og_context_negotiation_info().
 */
function skwiki_common_og_context_negotiation_info() {
  $providers = array();

  $providers['group-content-list'] = array(
    'name' => t('Group Content List'),
    'description' => t("Determine context by checking the current URL against known lists of group content (i.e. news, assignments)"),
    'callback' => 'skwiki_common_og_context_handler_group_content_list',
    'menu path' => array('news/%', 'assignments/%', 'nuggets/%'),
  );

  return $providers;
}

/**
 * Context handler; Get groups from existing node or ctools context.
 */
function skwiki_common_og_context_handler_group_content_list() {
  $menu_item = menu_get_item();
  return array($menu_item['page_arguments'][2]);
}

function skwiki_common_menu() {
  $items['add_tags/%node'] = array(
    'title' => 'New Tags found',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('skwiki_tags_form', 1),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  return $items;
}

function skwiki_tags_form($form, &$form_state, $node) {
  //Need to check for node type before this
  $string = $node->body['und'][0]['value'];
  
  $words = skwiki_common_top_words($string);
  $default_values = array();
  if (isset($node->field_tag_references['und'])) {
    $taxonomy_found = $node->field_tag_references['und'];
    
    foreach ($taxonomy_found as $taxonomy) {
      $term = taxonomy_term_load($taxonomy['tid']);
      if (!in_array($term->name, $words)) {
        $words[] = $term->name;
      }
      $default_values[] = array_search($term->name, $words);
    }
  }
  $form = array();
  $form['tags']['tags_found'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Choose which tags you want to associate with this content:'),
    '#options' => $words,
    '#default_value' => $default_values,
  );
  $form['tags']['tags_entered'] = array(
    '#title' => t('Not enough tags? Feel free to add more.'),
    '#type' => 'textarea',
    '#description' => t('Please separate tags by commas.'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add Tags'),
  );
  return $form;
}

function skwiki_tags_form_submit($form, &$form_state) {
  $nid = arg(1);
  $node = node_load($nid);
  
  unset($node->field_tag_references['und']);
  if (!isset($node->field_tag_references['und'])) {
    $node->field_tag_references['und'] = array();
  }
  
  $tags_entered = $form_state['input']['tags_entered'];
  $tags_selected = $form_state['input']['tags_found'];
  $tag_options = $form_state['complete form']['tags']['tags_found']['#options'];

  $tag_list = taxonomy_vocabulary_machine_name_load('tag_list');
  $vid = $tag_list->vid;
  $terms = taxonomy_get_tree($vid);
  $terms = skwiki_common_get_taxonomy_array($terms);
  
  foreach ($tag_options as $key => $option) { // Do this again for the typed in terms
    if ($tags_selected[$key] != null) {
      if ($terms != null && in_array($option, $terms)) {
        $taxonomy = taxonomy_get_term_by_name($option, 'tag_list');
        $term = array_shift($taxonomy);
      }
      else {
        //Add to taxonomy
        $term = new stdClass();
        $term->name = $option;
        $term->vid = $vid;
        taxonomy_term_save($term);
      }

      $node->field_tag_references['und'][] = array('tid' => $term->tid);
    }
  }

  if ($tags_entered) { //If the user added more tags in the text field, associate these with the node
    // Maybe validate these words in case they are stop words?
    $words = preg_split('#[\\s\",.!?;:\-()]#', $tags_entered, -1, PREG_SPLIT_NO_EMPTY);
    foreach ($words as $word) {
      if ($terms != null && in_array($word, $terms)) {
        $taxonomy = taxonomy_get_term_by_name($word, 'tag_list');
        $term = array_shift($taxonomy);
      }
      else {
        //Add to taxonomy
        $term = new stdClass();
        $term->name = $word;
        $term->vid = $vid;
        taxonomy_term_save($term);
      }

      $node->field_tag_references['und'][] = array('tid' => $term->tid);
    }
  }
  
  node_save($node);
  $form_state['redirect'] = 'node/' . $nid;  
}

function skwiki_common_form_alter(&$form, &$form_state, $form_id) {
  if (strstr($form_id, 'node_form')) {
    $form['actions']['submit']['#submit'][] = 'skwiki_common_check_tags';
  }
}

function skwiki_common_check_tags($form, &$form_state) {
  $form_state['redirect'] = 'add_tags/' . $form_state['nid'];
}

function skwiki_common_node_view($node, $build_mode = 'full') {

}

/**
 * Returns an array of the words considered for tags
 */
function skwiki_common_top_words($body = null) {
  if (!isset($body)) {
    return null; 
  }
  $words = preg_split('#[\\s\",.!?;:\-()]#', $body, -1, PREG_SPLIT_NO_EMPTY);
  // dpm($words);
  $words_arr = array();
  //Add the words and their frequencies into a single array
  foreach($words as $word) {
    // Need to verify that the word is actually a word and we need to make all the characters lower case
    $word = strtolower($word);
    if (!isset($words_arr[$word])) {
      $words_arr[$word] = 0;
    }
    $words_arr[$word]++;
  }
  arsort($words_arr);
  
  $stop_words = taxonomy_vocabulary_machine_name_load('stop_words');
  $vid = $stop_words->vid;
  $terms = taxonomy_get_tree($vid);
  $terms = skwiki_common_get_taxonomy_array($terms);
  $top_freq = 0;
  $top_words = array();
  
  //Prune the words array for stop words found
  foreach ($words_arr as $word => $freq) {
    if (in_array($word, $terms)) {
      unset($words_arr[$word]);
    }
    else {
      if ($top_freq == 0) {
        $top_freq = $freq;
        $min_freq = $top_freq * 0.4; // 0.4 is a value that may change depending on how terms we want to consider
        $top_words[] = $word;
      }
      else {
        if ($freq >= $min_freq) { //If the word passes the min occurrence add it to the array
          $top_words[] = $word;
        }
        if (count($top_words) == 8) { //We'll probably need to adjust the number of words we accept
          break;
        }
      }
    }
  }
  
  return $top_words;  
}
/**
 * Returns the taxonomy items as an array
 * for easy checking of content existence
 */
function skwiki_common_get_taxonomy_array($terms = null) {
  if ($terms == null) {
    return null;
  }
  else {
    $arr = array();
    foreach ($terms as $term) {
      $arr[] = $term->name; 
    }
    
    return $arr;
  }
}
